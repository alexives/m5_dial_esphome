id: MusicPage
lambda: |-
  it.filled_circle(120, 120, 120, Color(0,0,0));

  if (id(media_player_state).state != "playing")
  {
    it.filled_circle(120, 70, 30, light_grey_color);
    it.image(120, 70, source_1_image, ImageAlign::CENTER);

    it.filled_circle(120, 170, 30, light_grey_color);
    it.image(120, 170, source_2_image, ImageAlign::CENTER);

    it.filled_circle(70, 120, 30, light_grey_color);
    it.image(70, 120, source_3_image, ImageAlign::CENTER);

    it.filled_circle(170, 120, 30, light_grey_color);
    it.image(170, 120, media_play_small, ImageAlign::CENTER);
  }
  else
  {
    it.image(120, 120, media_pause, ImageAlign::CENTER);
    it.image(190, 120, media_skip_next, ImageAlign::CENTER);
    it.image(50, 120, media_skip_previous, ImageAlign::CENTER);
  }

  float screenheight = it.get_height();
  float screenwidth = it.get_width();
  float halfscreenheight = screenheight / 2;
  float halfscreenwidth = screenwidth / 2;

  int centerX = 120;  // X-coordinate of the circle center
  int centerY = 120;  // Y-coordinate of the circle center

  float currentMusicCircleAngle = (360 - id(music_bottom_gauge_angle).state) * (id(new_music_position).state / 60);
  float targetMusicCircleAngle = (360 - id(music_bottom_gauge_angle).state) * (id(music_current_position).state / 60);

  float startAngle = id(music_bottom_gauge_angle).state / 2;
  float firstStepAngle = (currentMusicCircleAngle < targetMusicCircleAngle) ? currentMusicCircleAngle : targetMusicCircleAngle;
  float secondStepAngle = (currentMusicCircleAngle > targetMusicCircleAngle) ? firstStepAngle : targetMusicCircleAngle;
  float endAngle = 360 - id(music_bottom_gauge_angle).state;

  // Display temperature arc circle
  it
    .filled_circle(
      halfscreenwidth + (halfscreenwidth - 10) * cos((90 + startAngle) * id(pi).state / 180),
      halfscreenheight + (halfscreenheight - 10) * sin((90 + startAngle) * id(pi).state / 180), 
      5, 
      id(light_orange_color));
  it
    .filled_circle(
      halfscreenwidth + (halfscreenwidth - 10) * cos((90 + startAngle + endAngle) * id(pi).state / 180),
      halfscreenheight + (halfscreenheight - 10) * sin((90 + startAngle + endAngle) * id(pi).state / 180), 
      5, 
      id(very_dark_grey_color));


  for (int i = startAngle; i <= startAngle + firstStepAngle; i++) {
      it
        .filled_triangle(
          halfscreenwidth + (halfscreenwidth - 15) * cos((90 + i) * id(pi).state / 180),
          halfscreenheight + (halfscreenheight - 15) * sin((90 + i) * id(pi).state / 180), 
          halfscreenwidth + (halfscreenwidth - 5) * cos((90 + i) * id(pi).state / 180), 
          halfscreenheight + (halfscreenheight - 5) * sin((90 + i) * id(pi).state / 180), 
          halfscreenwidth + (halfscreenwidth - 5) * cos((90 + (i + 1)) * id(pi).state / 180), 
          halfscreenheight + (halfscreenheight - 5) * sin((90 + (i + 1)) * id(pi).state / 180), 
          id(light_yellow_color));
      it
        .filled_triangle(
          halfscreenwidth + (halfscreenwidth - 15) * cos((90 + i) * id(pi).state / 180),
          halfscreenheight + (halfscreenheight - 15) * sin((90 + i) * id(pi).state / 180), 
          halfscreenwidth + (halfscreenwidth - 5) * cos((90 + (i + 1)) * id(pi).state / 180), 
          halfscreenheight + (halfscreenheight - 5) * sin((90 + (i + 1)) * id(pi).state / 180), 
          halfscreenwidth + (halfscreenwidth - 15) * cos((90 + (i + 1)) * id(pi).state / 180),
          halfscreenheight + (halfscreenheight - 15) * sin((90 + (i + 1)) * id(pi).state / 180), 
          id(light_yellow_color));
    }

  for (int i = startAngle + firstStepAngle; i <= startAngle + secondStepAngle; i++) {
      it
        .filled_triangle(
          halfscreenwidth + (halfscreenwidth - 15) * cos((90 + i) * id(pi).state / 180),
          halfscreenheight + (halfscreenheight - 15) * sin((90 + i) * id(pi).state / 180), 
          halfscreenwidth + (halfscreenwidth - 5) * cos((90 + i) * id(pi).state / 180), 
          halfscreenheight + (halfscreenheight - 5) * sin((90 + i) * id(pi).state / 180), 
          halfscreenwidth + (halfscreenwidth - 5) * cos((90 + (i + 1)) * id(pi).state / 180), 
          halfscreenheight + (halfscreenheight - 5) * sin((90 + (i + 1)) * id(pi).state / 180), 
          id(light_grey_color));
      it
        .filled_triangle(
          halfscreenwidth + (halfscreenwidth - 15) * cos((90 + i) * id(pi).state / 180),
          halfscreenheight + (halfscreenheight - 15) * sin((90 + i) * id(pi).state / 180), 
          halfscreenwidth + (halfscreenwidth - 5) * cos((90 + (i + 1)) * id(pi).state / 180), 
          halfscreenheight + (halfscreenheight - 5) * sin((90 + (i + 1)) * id(pi).state / 180), 
          halfscreenwidth + (halfscreenwidth - 15) * cos((90 + (i + 1)) * id(pi).state / 180),
          halfscreenheight + (halfscreenheight - 15) * sin((90 + (i + 1)) * id(pi).state / 180), 
          id(light_grey_color));
    }
    for (int i = startAngle + secondStepAngle; i <= startAngle + endAngle; i++) {
      it
        .filled_triangle(
          halfscreenwidth + (halfscreenwidth - 15) * cos((90 + i) * id(pi).state / 180),
          halfscreenheight + (halfscreenheight - 15) * sin((90 + i) * id(pi).state / 180), 
          halfscreenwidth + (halfscreenwidth - 5) * cos((90 + i) * id(pi).state / 180), 
          halfscreenheight + (halfscreenheight - 5) * sin((90 + i) * id(pi).state / 180), 
          halfscreenwidth + (halfscreenwidth - 5) * cos((90 + (i + 1)) * id(pi).state / 180), 
          halfscreenheight + (halfscreenheight - 5) * sin((90 + (i + 1)) * id(pi).state / 180), 
          id(very_dark_grey_color));
      it
        .filled_triangle(
          halfscreenwidth + (halfscreenwidth - 15) * cos((90 + i) * id(pi).state / 180),
          halfscreenheight + (halfscreenheight - 15) * sin((90 + i) * id(pi).state / 180), 
          halfscreenwidth + (halfscreenwidth - 5) * cos((90 + (i + 1)) * id(pi).state / 180), 
          halfscreenheight + (halfscreenheight - 5) * sin((90 + (i + 1)) * id(pi).state / 180), 
          halfscreenwidth + (halfscreenwidth - 15) * cos((90 + (i + 1)) * id(pi).state / 180),
          halfscreenheight + (halfscreenheight - 15) * sin((90 + (i + 1)) * id(pi).state / 180), 
          id(very_dark_grey_color));
    }

  // Current temperature round
    it
      .filled_circle(
        halfscreenwidth + (halfscreenwidth - 10) * cos((90 + startAngle + currentMusicCircleAngle) * id(pi).state / 180),
        halfscreenheight + (halfscreenheight - 10) * sin((90 + startAngle + currentMusicCircleAngle) * id(pi).state / 180), 
        3, 
        id(white_color));

    // Start of the second step
    if (firstStepAngle < secondStepAngle) {
      it
        .filled_circle(
          halfscreenwidth + (halfscreenwidth - 10) * cos((90 + startAngle + firstStepAngle) * id(pi).state / 180),
          halfscreenheight + (halfscreenheight - 10) * sin((90 + startAngle + firstStepAngle) * id(pi).state / 180), 
          5, 
          id(white_color));
      it
        .filled_circle(
          halfscreenwidth + (halfscreenwidth - 10) * cos((90 + startAngle + firstStepAngle) * id(pi).state / 180),
          halfscreenheight + (halfscreenheight - 10) * sin((90 + startAngle + firstStepAngle) * id(pi).state / 180), 
          2, 
          id(very_dark_grey_color));
    } 

  it.printf(halfscreenwidth, halfscreenheight + 100, id(roboto20), TextAlign::CENTER, "%0.f", id(new_music_position).state);
